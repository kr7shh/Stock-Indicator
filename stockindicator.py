# -*- coding: utf-8 -*-
"""StockIndicator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zuge30EcW6XS4ba7syXpzCs6AJKkrGm7
"""

#Description: Create and plot multiple tech indicators

#Import the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#loading data
from google.colab import files
files.upload()

#store data
df=pd.read_csv('datastocks69.csv')
#set date as index
df = df.set_index(pd.DatetimeIndex(df['Date'].values))
#show data
df

#Function for SMA(simple moving average) and EMA(exponential moving average)
#SMA (commonly used days for averages are 15,20,30,50,100 and 200 days)
def SMA(data, period=30, column = 'Close'):
  return data[column].rolling(window=period).mean()

#EMA (commonly used days for averages are the same as SMA)
def EMA(data,period=20, column='Close'):
  return data[column].ewm(span=period, adjust = False).mean()

#Function for MACD(Moving Average Convergence/Divergence)(longer periods = 26 day exponential moving average, shorter period = 20 day exponential moving average, signal line = 9 day exponential moving average)
def MACD(data, period_long=26, period_short=12, period_signal=9, column = 'Close'):
  #Function for short term exponential moving average
  shortEMA = EMA(data, period_short, column=column)
  #Function for long term exponential moving average
  longEMA = EMA(data, period_long, column=column)
  #Calculate MACD
  data['MACD'] = shortEMA - longEMA
  #Calculate Signal line
  data['Signal Line'] = EMA(data, period_signal, column='MACD')

  return data

#Function for RSI (relative strength index)
def RSI(data, period=14, column='Close'):
  delta = data[column].diff(1)
  delta = delta[1:]
  up = delta.copy()
  down = delta.copy()
  up[up<0] = 0
  down[down>0] = 0
  data['up'] = up
  data['down']= down
  AVG_Gain = SMA(data, period, column = 'up')
  AVG_Loss = abs(SMA(data, period, column = 'down'))
  RS = AVG_Gain/AVG_Loss
  RSI = (100.0 - 100/(1.0 + RS))

  data['RSI'] = RSI 
  
  return data

#Create and add to the data set
MACD(df)
RSI(df)
df['SMA'] = SMA(df)
df['EMA'] = EMA(df)

#Show data
df

#Chart
#Create a list for column
column_list = ['MACD', 'Signal Line']
df[column_list].plot(figsize=(20,10))
plt.title('MACD for Tesla')
plt.ylabel('USD Price')
plt.xlabel('Date')
plt.show()